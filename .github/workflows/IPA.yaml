name: Generate Project and Build IPA

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Debug layout
        run: |
          echo "== Repo root ==" && pwd
          ls -la
          echo "== Jarvis dir ==" && ls -la Jarvis || true
          echo "== Submodule dir ==" && ls -la external || true
          ls -la external/mlcllm || true
          echo "== Key files =="
          test -f Jarvis/project.yml && echo "Jarvis/project.yml: OK" || echo "Jarvis/project.yml: MISSING"
          test -f Jarvis/Package.swift && echo "Jarvis/Package.swift: OK" || echo "Jarvis/Package.swift: MISSING"
          test -f Jarvis/Sources/AppModule/App/Info.plist && echo "Info.plist: OK" || echo "Info.plist: MISSING"

      - name: Set up Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Install build tools (CMake, Rustup) and XcodeGen
        run: |
          brew install cmake xcodegen rustup-init || true
          if ! command -v rustup >/dev/null 2>&1; then
            echo "Initializing rustup..."
            rustup-init -y
          fi
          echo 'source $HOME/.cargo/env' >> $GITHUB_ENV

      - name: Build mlc-llm iOS device static libs (arm64)
        shell: bash
        run: |
          set -euxo pipefail
          source $HOME/.cargo/env
          cd external/mlcllm/ios
          chmod +x prepare_libs.sh
          ./prepare_libs.sh
          echo "== Built static libs =="
          find build -maxdepth 3 -type f -name "*.a" -print || true

      - name: Stage mlc-llm libs and bundle into Jarvis/dist
        run: |
          set -euxo pipefail
          mkdir -p Jarvis/dist/lib Jarvis/dist/bundle

          # Copy all installed static libs from the submodule build.
          # Adjust the source path below if your install layout differs.
          if [ -d external/mlcllm/ios/build/lib ]; then
            cp -R external/mlcllm/ios/build/lib/*.a Jarvis/dist/lib/ || true
          fi

          # Optionally copy runtime bundle assets if your pipeline generates them elsewhere in the submodule
          # Example paths (adjust/remove as needed):
          if [ -d external/mlcllm/ios/prebuilt/bundle ]; then
            cp -R external/mlcllm/ios/prebuilt/bundle/* Jarvis/dist/bundle/ || true
          fi
          if [ -d external/mlcllm/ios/MLCGen/output/bundle ]; then
            cp -R external/mlcllm/ios/MLCGen/output/bundle/* Jarvis/dist/bundle/ || true
          fi

          echo "== Dist lib =="
          ls -la Jarvis/dist/lib || true
          echo "== Dist bundle =="
          ls -la Jarvis/dist/bundle || true
          echo "== Architectures of libs =="
          for f in Jarvis/dist/lib/*.a; do
            [ -f "$f" ] && (file "$f" || true; lipo -info "$f" || true)
          done

      - name: Clean any stale project
        run: rm -rf Jarvis/Jarvis.xcodeproj

      - name: Generate Xcode project (run inside Jarvis/)
        working-directory: Jarvis
        run: xcodegen generate

      - name: List schemes
        run: xcodebuild -list -project Jarvis/Jarvis.xcodeproj

      - name: Build (optional fast fail)
        run: |
          set -o pipefail
          xcodebuild clean build \
            -project Jarvis/Jarvis.xcodeproj \
            -scheme Jarvis \
            -configuration Release \
            -destination "generic/platform=iOS" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY="" \
            IPHONEOS_DEPLOYMENT_TARGET=17.0

      - name: Archive (Release, unsigned)
        env:
          ARCHIVE_PATH: ${{ github.workspace }}/build/Jarvis.xcarchive
        run: |
          set -o pipefail
          xcodebuild clean archive \
            -project Jarvis/Jarvis.xcodeproj \
            -scheme Jarvis \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY="" \
            IPHONEOS_DEPLOYMENT_TARGET=17.0 \
            ENABLE_BITCODE=NO
          xcodebuild -showBuildSettings -project Jarvis/Jarvis.xcodeproj -scheme Jarvis > xcodebuild.log 2>&1 || true

      - name: Inspect archive contents
        run: |
          find build/Jarvis.xcarchive -maxdepth 3 -print || true

      - name: Create IPA manually (no exportArchive)
        env:
          ARCHIVE_PATH: ${{ github.workspace }}/build/Jarvis.xcarchive
          EXPORT_DIR:   ${{ github.workspace }}/build/export
        run: |
          set -o pipefail
          APP_DIR="$ARCHIVE_PATH/Products/Applications"
          APP_PATH="$(find "$APP_DIR" -maxdepth 1 -name "*.app" -print -quit)"
          if [ -z "$APP_PATH" ]; then
            echo "No .app found. Ensure the scheme builds an iOS App and archive succeeded."
            exit 1
          fi
          mkdir -p "$EXPORT_DIR/Payload"
          cp -R "$APP_PATH" "$EXPORT_DIR/Payload/"
          xattr -rc "$EXPORT_DIR/Payload"
          (cd "$EXPORT_DIR" && /usr/bin/zip -qry "Jarvis-unsigned.ipa" Payload)
          ls -la "$EXPORT_DIR"

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-ipa
          path: build/export/Jarvis-unsigned.ipa
          if-no-files-found: error

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: xcodebuild.log
