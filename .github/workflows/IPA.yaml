name: Generate Project and Build IPA

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Debug layout
        run: |
          echo "== Repo root =="
          pwd
          ls -la
          echo "== Jarvis dir =="
          ls -la Jarvis || true
          echo "== Key files =="
          test -f Jarvis/project.yml && echo "Jarvis/project.yml: OK" || echo "Jarvis/project.yml: MISSING"
          test -f Jarvis/Package.swift && echo "Jarvis/Package.swift: OK" || echo "Jarvis/Package.swift: MISSING"
          test -f Jarvis/Sources/AppModule/App/Info.plist && echo "Info.plist: OK" || echo "Info.plist: MISSING"

      - name: Set up Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.2"

      - name: Install XcodeGen
        run: brew install xcodegen

      # If you keep the native libs in another repo, fetch and copy them here.
      # Adjust the source paths below to match that repo's structure.
      - name: Fetch mlc-llm native artifacts (prebuilt) for iOS
        run: |
          set -e
          git clone --depth=1 https://github.com/Mistico06/mlc-llm.git external/mlc-llm
          mkdir -p Jarvis/dist/lib Jarvis/dist/bundle
          # Copy native libraries (update source dir as needed)
          if [ -d external/mlc-llm/prebuilt/ios/lib ]; then
            cp -R external/mlc-llm/prebuilt/ios/lib/* Jarvis/dist/lib/ || true
          fi
          # Copy runtime assets (update source dir as needed)
          if [ -d external/mlc-llm/prebuilt/ios/bundle ]; then
            cp -R external/mlc-llm/prebuilt/ios/bundle/* Jarvis/dist/bundle/ || true
          fi
          echo "== Dist lib =="
          ls -la Jarvis/dist/lib || true
          echo "== Dist bundle =="
          ls -la Jarvis/dist/bundle || true

      - name: Clean any stale project
        run: rm -rf Jarvis/Jarvis.xcodeproj

      - name: Generate Xcode project (run inside Jarvis/)
        working-directory: Jarvis
        run: xcodegen generate

      - name: Verify project and artifacts
        run: |
          set -e
          test -d Jarvis/Jarvis.xcodeproj || (echo "Missing Jarvis/Jarvis.xcodeproj" && exit 1)
          test -f Jarvis/Package.swift || (echo "Missing Jarvis/Package.swift" && exit 1)
          test -f Jarvis/Sources/AppModule/App/Info.plist || (echo "Missing Info.plist" && exit 1)
          echo "== Native libs (optional but expected if you use MLCSwift) =="
          ls -la Jarvis/dist/lib || true
          echo "== Runtime bundle (optional) =="
          ls -la Jarvis/dist/bundle || true

      - name: List schemes
        run: xcodebuild -list -project Jarvis/Jarvis.xcodeproj

      - name: Build (optional fast fail)
        run: |
          set -o pipefail
          xcodebuild clean build \
            -project Jarvis/Jarvis.xcodeproj \
            -scheme Jarvis \
            -configuration Release \
            -destination "generic/platform=iOS" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY="" \
            IPHONEOS_DEPLOYMENT_TARGET=17.0

      - name: Archive (Release, unsigned)
        env:
          ARCHIVE_PATH: ${{ github.workspace }}/build/Jarvis.xcarchive
        run: |
          set -o pipefail
          xcodebuild clean archive \
            -project Jarvis/Jarvis.xcodeproj \
            -scheme Jarvis \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGNING_IDENTITY="" \
            IPHONEOS_DEPLOYMENT_TARGET=17.0 \
            ENABLE_BITCODE=NO
          xcodebuild -showBuildSettings -project Jarvis/Jarvis.xcodeproj -scheme Jarvis > xcodebuild.log 2>&1 || true

      - name: Inspect archive contents
        run: |
          find build/Jarvis.xcarchive -maxdepth 3 -print || true

      - name: Create IPA manually (no exportArchive)
        env:
          ARCHIVE_PATH: ${{ github.workspace }}/build/Jarvis.xcarchive
          EXPORT_DIR:   ${{ github.workspace }}/build/export
        run: |
          set -o pipefail
          APP_DIR="$ARCHIVE_PATH/Products/Applications"
          echo "Searching for .app under: $APP_DIR"
          APP_PATH="$(find "$APP_DIR" -maxdepth 1 -name "*.app" -print -quit)"
          if [ -z "$APP_PATH" ]; then
            echo "No .app found. Ensure the scheme builds an iOS App and archive succeeded."
            exit 1
          fi
          echo "Found app: $APP_PATH"
          mkdir -p "$EXPORT_DIR/Payload"
          cp -R "$APP_PATH" "$EXPORT_DIR/Payload/"
          xattr -rc "$EXPORT_DIR/Payload"
          (cd "$EXPORT_DIR" && /usr/bin/zip -qry "Jarvis-unsigned.ipa" Payload)
          ls -la "$EXPORT_DIR"

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-ipa
          path: build/export/Jarvis-unsigned.ipa
          if-no-files-found: error

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: xcodebuild.log
